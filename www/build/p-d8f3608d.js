const n=n=>null!=n,t=t=>n(t)&&Array.isArray(t),s=s=>n(s)&&"object"==typeof s&&!t(s);function e(n){return"string"==typeof n}function o(n){return t(n)&&0===n.length||s(n)&&0===Object.keys(n).length||e(n)&&""===n}function i(n,t){return t?"Host"===t||!!n.querySelector(t):!!n.firstElementChild}function u(n,t,s,e){if(!o(t))if(n.selector)if("Host"===n.selector)s([n.el],t);else{const o=n.all?n.el.querySelectorAll(n.selector):[n.el.querySelector(n.selector)];o[0]&&(s(o,t),null==e||e.disconnect())}else{const o=n.all?[...n.el.children]:[n.el.firstElementChild];o&&o[0]&&(s(o,t),null==e||e.disconnect())}}function c(t,s,e){if(n(s)&&!o(s))if(i(t.el,t.selector))u(t,s,e);else{const n=new MutationObserver((()=>{u(t,s,e,n)}));n.observe(t.el,{childList:!0,subtree:!0})}}function f(n,t){t.forEach((t=>{n.forEach((n=>{n.classList.add(t)}))}))}export{t as a,s as b,e as c,o as d,i as e,c as f,f as g,n as i,u}