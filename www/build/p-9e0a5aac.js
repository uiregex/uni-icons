const t=t=>null!=t,n=n=>t(n)&&Array.isArray(n);function e(e){return n(e)&&0===e.length||(e=>t(e)&&"object"==typeof e&&!n(e))(e)&&0===Object.keys(e).length||function(t){return"string"==typeof t}(e)&&""===e}function o(t,n,o,s){if(!e(n))if(t.selector)if("Host"===t.selector)o([t.el],n);else{const e=t.all?t.el.querySelectorAll(t.selector):[t.el.querySelector(t.selector)];e[0]&&(o(e,n),null==s||s.disconnect())}else{const e=t.all?[...t.el.children]:[t.el.firstElementChild];e&&e[0]&&(o(e,n),null==s||s.disconnect())}}function s(n,s,i){if(t(s)&&!e(s))if(u=n.el,(c=n.selector)?"Host"===c||u.querySelector(c):u.firstElementChild)o(n,s,i);else{const t=new MutationObserver((()=>{o(n,s,i,t)}));t.observe(n.el,{childList:!0,subtree:!0})}var u,c}function i(t,n){n.forEach((n=>{t.forEach((t=>{t.classList.add(n)}))}))}export{i as a,e as i,s as u}